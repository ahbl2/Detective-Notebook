You are going to help me build a fully self-contained, offline desktop app using Electron, HTML/CSS, JavaScript, and SQLite. The app is called “The Digital Detective Guide.” I have no coding skills, so I need you to generate and explain everything clearly — including how to run it, test it, and export it as a portable app.

---

## PURPOSE:

The Digital Detective Guide is a living, portable knowledge base built by detectives — for detectives. It stores and passes down investigative wisdom including:
- Warrant templates
- How-to guides
- Surveillance techniques
- Courtroom preparation
- Contact lists
- Mentorship notes

It should be updated by every detective who uses it — creating a growing resource that trains, informs, and preserves institutional knowledge.

---

## CORE REQUIREMENTS:

- 100% offline
- Runs directly from a USB drive
- All data and files stay in a single folder
- Cross-platform: `.exe` for Windows, `.app` for Mac
- Zero installation required
- Uses relative paths only
- Must support easy contribution, merging, voting, and historical insight

---

## FOLDER STRUCTURE:

```
TheDigitalDetectiveGuide/
├── DigitalDetectiveGuide.exe (or .app)
├── notebook.db
├── files/
├── exports/
├── help/
├── config.json
├── main.js
├── index.html
├── style.css
├── renderer.js
├── preload.js
```

---

## FEATURES:

### 1. Categories:
- Default:
  - Search Warrants
  - Interview & Interrogation
  - Case Management
  - Tech & Forensics
  - Courtroom & Testimony
  - Mentor’s Notes
- Users can add, rename, delete categories
- Categories stored in the database

---

### 2. Entry Fields:
- Title
- File (copied to `/files/`, UUID-safe filename)
- Description
- “Detective Wisdom” note box
- Tags
- Assigned category
- Date added
- Last updated
- Entry UUID
- View count (optional)
- Contributor Device ID

---

### 3. Entry Actions:
- Add / edit / delete
- Open file in system viewer
- Drag-and-drop support
- Star/favorite entry
- View 3 most recent versions and revert

---

### 4. Search:
- Search across title, description, wisdom, and tags
- Results grouped by category

---

### 5. Templates:
- Save any entry as a reusable template
- Templates listed in a dedicated section
- Clone template into new entry

---

### 6. Export / Backup:
- Export entries to HTML, PDF, JSON, or CSV
- Backup ZIP includes:
  - notebook.db
  - files/
  - config.json
- Restore from ZIP file

---

## ONE-WAY MERGE SYSTEM:

### Export for Merge:
- Export:
  - changes.json (new entries only)
  - linked files
- ZIP bundle:
```
ddg-merge-export-[deviceID]-[timestamp].zip
├── changes.json
└── files/
```

### Import Merge:
- Imports entries only if they are new
- Prevents duplication
- Combines ratings and contributor info

---

## RATING SYSTEM:
- Users can rate entries (1–5 stars)
- One vote per `device_id` per entry
- Ratings stored in `Ratings` table with:
  - entry_id
  - device_id
  - rating
  - timestamp
- Show:
  > “★★★★☆ (14 ratings)”
- Merged ratings update average and vote count

---

## PHASE 2 EXPANSION FEATURES:

### A. Contributor Log / Attribution:
- Store which device added or edited an entry
- Display attribution in each entry:
  > “Added by USB_03 on 2025-05-01”

---

### B. Most Viewed Counter:
- Track how many times an entry is opened
- Display view count in UI
  > “Viewed 18 times”

---

### C. Comments System:
- Detectives can leave comments on entries
- Stored in a separate `Comments` table:
```sql
Comments (
  id TEXT,
  entry_id TEXT,
  device_id TEXT,
  comment TEXT,
  timestamp TEXT
)
```
- Display threaded comment history under each entry

---

### D. Legacy Timeline View:
- Show a chronological list of updates:
  > “April 12 – USB_01 added 3 entries”
  > “May 4 – USB_03 merged 2 templates”
- Optionally filtered by category or contributor

---

### E. Smart Merge Suggestions (Optional Mode):
- During import:
  - Flag very similar titles with differing content
  - Prompt user: “Keep both,” “Overwrite,” or “Ignore”
- This is optional and can be toggled in config.json

---

### F. Offline Update Notification:
- App checks `last_merged` date
- If changes haven’t been synced in X days, show message:
  > “You’ve made 12 entries since your last sync. Consider exporting a merge update.”

---

## Help Tab:
- Help tab in header or sidebar
- Uses `/help/user-guide.html`
- Explains:
  - How to use the app
  - Export/import/merge steps
  - Rating system
  - Legacy goals

---

## Portable Mode Indicator:
- Display:
  > “Running in Portable Mode — Data stored at: E:/DigitalDetectiveGuide”

---

## Startup Self-Check:
- On first launch:
  - Create `notebook.db`, `files/`, `exports/`, `help/`, and `config.json` if missing
  - Generate unique `device_id` in `config.json`

---

## TECH REQUIREMENTS:

- Electron app using HTML/CSS/JavaScript
- SQLite for all persistent data
- All paths must be relative
- All functionality must work offline and from a USB drive
- Must be buildable to `.exe` and `.app` as portable desktop apps

---

## INSTRUCTIONS TO YOU (Cursor):

1. Create full folder structure
2. Scaffold Electron boilerplate
3. Create database schema for:
   - Entries
   - Categories
   - Templates
   - Ratings
   - Version History
   - Comments
   - Contributors
4. Build HTML UI with collapsible category sections and readable layout
5. Implement:
   - Add/edit/delete entries
   - File handling with UUID names
   - Rating system
   - Search
   - One-way merge system
   - Commenting
   - View tracking
   - Legacy timeline
   - Offline update prompts
6. Add built-in help screen
7. Walk me through testing the app in Cursor
8. Help me package it as `.exe` or `.app` for USB use

Assume I have no technical background. Guide me clearly and completely.